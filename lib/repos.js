'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.repos_callback = repos_callback;
exports.repos_executor = repos_executor;
exports.repos_promise = repos_promise;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promise = require('./promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function repos_callback(dir, callback) {

	_fs2.default.readdir(dir, function (err, files) {

		if (err) return callback(err); // forward error

		let pending = files.length;

		if (!pending) return callback(null, []); // is empty

		if (files.includes('.git')) return callback(null, [dir]); // is repo

		const results = [];

		for (const file of files) {

			if (file[0] === '.') {
				if (! --pending) callback(null, results);
				continue; // skip hidden
			}

			const filepath = _path2.default.join(dir, file);

			_fs2.default.lstat(filepath, function (err, stat) {

				if (err || stat.isSymbolicLink() || !stat.isDirectory()) {
					if (! --pending) callback(null, results); // skip
				} else {

					repos_callback(filepath, function (err, res) {

						if (err) {

							if (! --pending) callback(null, results); // skip
						} else {

							for (const v of res) results.push(v);

							if (! --pending) callback(null, results);
						}
					});
				}
			});
		}
	});
}

function repos_executor(dir) {

	return function (resolve, reject) {

		const callback = (0, _promise.promise_callback)(resolve, reject);
		repos_callback(dir, callback);
	};
}

function repos_promise(dir) {

	return new Promise(repos_executor(dir));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXBvcy5qcyJdLCJuYW1lcyI6WyJyZXBvc19jYWxsYmFjayIsInJlcG9zX2V4ZWN1dG9yIiwicmVwb3NfcHJvbWlzZSIsImRpciIsImNhbGxiYWNrIiwicmVhZGRpciIsImVyciIsImZpbGVzIiwicGVuZGluZyIsImxlbmd0aCIsImluY2x1ZGVzIiwicmVzdWx0cyIsImZpbGUiLCJmaWxlcGF0aCIsImpvaW4iLCJsc3RhdCIsInN0YXQiLCJpc1N5bWJvbGljTGluayIsImlzRGlyZWN0b3J5IiwicmVzIiwidiIsInB1c2giLCJyZXNvbHZlIiwicmVqZWN0IiwiUHJvbWlzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLZ0JBLGMsR0FBQUEsYztRQTJEQUMsYyxHQUFBQSxjO1FBV0FDLGEsR0FBQUEsYTs7QUExRWhCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLFNBQVNGLGNBQVQsQ0FBMEJHLEdBQTFCLEVBQWdDQyxRQUFoQyxFQUEyQzs7QUFFL0MsY0FBR0MsT0FBSCxDQUFXRixHQUFYLEVBQWdCLFVBQVNHLEdBQVQsRUFBY0MsS0FBZCxFQUFxQjs7QUFFdEMsTUFBSUQsR0FBSixFQUFTLE9BQU9GLFNBQVVFLEdBQVYsQ0FBUCxDQUY2QixDQUVKOztBQUVsQyxNQUFJRSxVQUFVRCxNQUFNRSxNQUFwQjs7QUFFQSxNQUFJLENBQUNELE9BQUwsRUFBYyxPQUFPSixTQUFVLElBQVYsRUFBaUIsRUFBakIsQ0FBUCxDQU53QixDQU1ROztBQUU5QyxNQUFJRyxNQUFNRyxRQUFOLENBQWUsTUFBZixDQUFKLEVBQTRCLE9BQU9OLFNBQVUsSUFBVixFQUFpQixDQUFFRCxHQUFGLENBQWpCLENBQVAsQ0FSVSxDQVEwQjs7QUFFOUQsUUFBTVEsVUFBVSxFQUFoQjs7QUFFRixPQUFNLE1BQU1DLElBQVosSUFBb0JMLEtBQXBCLEVBQTRCOztBQUUzQixPQUFLSyxLQUFLLENBQUwsTUFBWSxHQUFqQixFQUF1QjtBQUN0QixRQUFJLENBQUMsR0FBRUosT0FBUCxFQUFnQkosU0FBVSxJQUFWLEVBQWlCTyxPQUFqQjtBQUNoQixhQUZzQixDQUVYO0FBQ1g7O0FBRUQsU0FBTUUsV0FBVyxlQUFLQyxJQUFMLENBQVVYLEdBQVYsRUFBZVMsSUFBZixDQUFqQjs7QUFFQSxnQkFBR0csS0FBSCxDQUFTRixRQUFULEVBQW1CLFVBQVNQLEdBQVQsRUFBY1UsSUFBZCxFQUFvQjs7QUFFdEMsUUFBS1YsT0FBT1UsS0FBS0MsY0FBTCxFQUFQLElBQWdDLENBQUNELEtBQUtFLFdBQUwsRUFBdEMsRUFBMkQ7QUFDMUQsU0FBSSxDQUFDLEdBQUVWLE9BQVAsRUFBZ0JKLFNBQVUsSUFBVixFQUFpQk8sT0FBakIsRUFEMEMsQ0FDYjtBQUM3QyxLQUZELE1BSUs7O0FBRUpYLG9CQUFlYSxRQUFmLEVBQXlCLFVBQVNQLEdBQVQsRUFBY2EsR0FBZCxFQUFtQjs7QUFFM0MsVUFBSWIsR0FBSixFQUFTOztBQUVSLFdBQUksQ0FBQyxHQUFFRSxPQUFQLEVBQWdCSixTQUFVLElBQVYsRUFBaUJPLE9BQWpCLEVBRlIsQ0FFcUM7QUFFN0MsT0FKRCxNQU1LOztBQUVKLFlBQU0sTUFBTVMsQ0FBWixJQUFpQkQsR0FBakIsRUFBdUJSLFFBQVFVLElBQVIsQ0FBY0QsQ0FBZDs7QUFFdkIsV0FBSSxDQUFDLEdBQUVaLE9BQVAsRUFBZ0JKLFNBQVMsSUFBVCxFQUFlTyxPQUFmO0FBRWhCO0FBRUQsTUFoQkQ7QUFrQkE7QUFFRCxJQTVCRDtBQThCQTtBQUVELEVBckRDO0FBdURGOztBQUVNLFNBQVNWLGNBQVQsQ0FBMEJFLEdBQTFCLEVBQWdDOztBQUV0QyxRQUFPLFVBQVdtQixPQUFYLEVBQXFCQyxNQUFyQixFQUE4Qjs7QUFFcEMsUUFBTW5CLFdBQVcsK0JBQWtCa0IsT0FBbEIsRUFBNEJDLE1BQTVCLENBQWpCO0FBQ0F2QixpQkFBZ0JHLEdBQWhCLEVBQXNCQyxRQUF0QjtBQUVBLEVBTEQ7QUFPQTs7QUFFTSxTQUFTRixhQUFULENBQXlCQyxHQUF6QixFQUErQjs7QUFFckMsUUFBTyxJQUFJcUIsT0FBSixDQUFhdkIsZUFBZUUsR0FBZixDQUFiLENBQVA7QUFFQSIsImZpbGUiOiJyZXBvcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGZzIGZyb20gJ2ZzJyA7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJyA7XG5pbXBvcnQgeyBwcm9taXNlX2NhbGxiYWNrIH0gZnJvbSAnLi9wcm9taXNlJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc19jYWxsYmFjayAoIGRpciAsIGNhbGxiYWNrICkge1xuXG5cdCAgZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uKGVyciwgZmlsZXMpIHtcblxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayggZXJyICkgOyAvLyBmb3J3YXJkIGVycm9yXG5cblx0XHRsZXQgcGVuZGluZyA9IGZpbGVzLmxlbmd0aCA7XG5cblx0XHRpZiAoIXBlbmRpbmcpIHJldHVybiBjYWxsYmFjayggbnVsbCAsIFsgXSApIDsgLy8gaXMgZW1wdHlcblxuXHRcdGlmIChmaWxlcy5pbmNsdWRlcygnLmdpdCcpKSByZXR1cm4gY2FsbGJhY2soIG51bGwgLCBbIGRpciBdICkgOyAvLyBpcyByZXBvXG5cblx0ICBcdGNvbnN0IHJlc3VsdHMgPSBbIF0gO1xuXG5cdFx0Zm9yICggY29uc3QgZmlsZSBvZiBmaWxlcyApIHtcblxuXHRcdFx0aWYgKCBmaWxlWzBdID09PSAnLicgKSB7XG5cdFx0XHRcdGlmICghLS1wZW5kaW5nKSBjYWxsYmFjayggbnVsbCAsIHJlc3VsdHMgKSA7XG5cdFx0XHRcdGNvbnRpbnVlIDsgLy8gc2tpcCBoaWRkZW5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZmlsZXBhdGggPSBwYXRoLmpvaW4oZGlyLCBmaWxlKTtcblxuXHRcdFx0ZnMubHN0YXQoZmlsZXBhdGgsIGZ1bmN0aW9uKGVyciwgc3RhdCkge1xuXG5cdFx0XHRcdGlmICggZXJyIHx8IHN0YXQuaXNTeW1ib2xpY0xpbmsoKSB8fCAhc3RhdC5pc0RpcmVjdG9yeSgpICkge1xuXHRcdFx0XHRcdGlmICghLS1wZW5kaW5nKSBjYWxsYmFjayggbnVsbCAsIHJlc3VsdHMgKSA7IC8vIHNraXBcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVwb3NfY2FsbGJhY2soZmlsZXBhdGgsIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG5cblx0XHRcdFx0XHRcdGlmIChlcnIpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIS0tcGVuZGluZykgY2FsbGJhY2soIG51bGwgLCByZXN1bHRzICkgOyAvLyBza2lwXG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggY29uc3QgdiBvZiByZXMgKSByZXN1bHRzLnB1c2goIHYgKSA7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCEtLXBlbmRpbmcpIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc19leGVjdXRvciAoIGRpciApIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCByZXNvbHZlICwgcmVqZWN0ICkge1xuXG5cdFx0Y29uc3QgY2FsbGJhY2sgPSBwcm9taXNlX2NhbGxiYWNrKCByZXNvbHZlICwgcmVqZWN0ICkgO1xuXHRcdHJlcG9zX2NhbGxiYWNrKCBkaXIgLCBjYWxsYmFjayApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3NfcHJvbWlzZSAoIGRpciApIHtcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoIHJlcG9zX2V4ZWN1dG9yKGRpcikgKSA7XG5cbn1cbiJdfQ==