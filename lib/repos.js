'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.repos_callback = repos_callback;
exports.repos_executor = repos_executor;
exports.repos_promise = repos_promise;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promise = require('./promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function repos_callback(dir, callback) {

	_fs2.default.readdir(dir, function (err, files) {

		if (err) return callback(err); // forward error

		let pending = files.length;

		if (!pending) return callback(null, []); // is empty

		if (files.includes('.git')) return callback(null, [dir]); // is repo

		const results = [];

		for (const file of files) {

			if (file[0] === '.') {
				if (! --pending) callback(null, results);
				continue; // skip hidden
			}

			const filepath = _path2.default.join(dir, file);

			_fs2.default.lstat(filepath, function (err, stat) {

				if (err || stat.isSymbolicLink() || !stat.isDirectory()) {
					if (! --pending) callback(null, results); // skip
				} else {

					repos_callback(filepath, function (err, res) {

						if (err) {

							if (! --pending) callback(null, results); // skip
						} else {

							for (const v of res) results.push(v);

							if (! --pending) callback(null, results);
						}
					});
				}
			});
		}
	});
}

function repos_executor(dir) {

	return function (resolve, reject) {

		const callback = (0, _promise.promise_callback)(resolve, reject);
		repos_callback(dir, callback);
	};
}

function repos_promise(dir) {

	return new Promise(repos_executor(dir));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXBvcy5qcyJdLCJuYW1lcyI6WyJyZXBvc19jYWxsYmFjayIsInJlcG9zX2V4ZWN1dG9yIiwicmVwb3NfcHJvbWlzZSIsImRpciIsImNhbGxiYWNrIiwiZnMiLCJyZWFkZGlyIiwiZXJyIiwiZmlsZXMiLCJwZW5kaW5nIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJyZXN1bHRzIiwiZmlsZSIsImZpbGVwYXRoIiwicGF0aCIsImpvaW4iLCJsc3RhdCIsInN0YXQiLCJpc1N5bWJvbGljTGluayIsImlzRGlyZWN0b3J5IiwicmVzIiwidiIsInB1c2giLCJyZXNvbHZlIiwicmVqZWN0IiwiUHJvbWlzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLZ0JBLGMsR0FBQUEsYztRQTJEQUMsYyxHQUFBQSxjO1FBV0FDLGEsR0FBQUEsYTs7QUExRWhCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLFNBQVNGLGNBQVQsQ0FBMEJHLEdBQTFCLEVBQWdDQyxRQUFoQyxFQUEyQzs7QUFFL0NDLGNBQUdDLE9BQUgsQ0FBV0gsR0FBWCxFQUFnQixVQUFTSSxHQUFULEVBQWNDLEtBQWQsRUFBcUI7O0FBRXRDLE1BQUlELEdBQUosRUFBUyxPQUFPSCxTQUFVRyxHQUFWLENBQVAsQ0FGNkIsQ0FFSjs7QUFFbEMsTUFBSUUsVUFBVUQsTUFBTUUsTUFBcEI7O0FBRUEsTUFBSSxDQUFDRCxPQUFMLEVBQWMsT0FBT0wsU0FBVSxJQUFWLEVBQWlCLEVBQWpCLENBQVAsQ0FOd0IsQ0FNUTs7QUFFOUMsTUFBSUksTUFBTUcsUUFBTixDQUFlLE1BQWYsQ0FBSixFQUE0QixPQUFPUCxTQUFVLElBQVYsRUFBaUIsQ0FBRUQsR0FBRixDQUFqQixDQUFQLENBUlUsQ0FRMEI7O0FBRWhFLFFBQU1TLFVBQVUsRUFBaEI7O0FBRUEsT0FBTSxNQUFNQyxJQUFaLElBQW9CTCxLQUFwQixFQUE0Qjs7QUFFM0IsT0FBS0ssS0FBSyxDQUFMLE1BQVksR0FBakIsRUFBdUI7QUFDdEIsUUFBSSxDQUFDLEdBQUVKLE9BQVAsRUFBZ0JMLFNBQVUsSUFBVixFQUFpQlEsT0FBakI7QUFDaEIsYUFGc0IsQ0FFWDtBQUNYOztBQUVELFNBQU1FLFdBQVdDLGVBQUtDLElBQUwsQ0FBVWIsR0FBVixFQUFlVSxJQUFmLENBQWpCOztBQUVBUixnQkFBR1ksS0FBSCxDQUFTSCxRQUFULEVBQW1CLFVBQVNQLEdBQVQsRUFBY1csSUFBZCxFQUFvQjs7QUFFdEMsUUFBS1gsT0FBT1csS0FBS0MsY0FBTCxFQUFQLElBQWdDLENBQUNELEtBQUtFLFdBQUwsRUFBdEMsRUFBMkQ7QUFDMUQsU0FBSSxDQUFDLEdBQUVYLE9BQVAsRUFBZ0JMLFNBQVUsSUFBVixFQUFpQlEsT0FBakIsRUFEMEMsQ0FDYjtBQUM3QyxLQUZELE1BSUs7O0FBRUpaLG9CQUFlYyxRQUFmLEVBQXlCLFVBQVNQLEdBQVQsRUFBY2MsR0FBZCxFQUFtQjs7QUFFM0MsVUFBSWQsR0FBSixFQUFTOztBQUVSLFdBQUksQ0FBQyxHQUFFRSxPQUFQLEVBQWdCTCxTQUFVLElBQVYsRUFBaUJRLE9BQWpCLEVBRlIsQ0FFcUM7QUFFN0MsT0FKRCxNQU1LOztBQUVKLFlBQU0sTUFBTVUsQ0FBWixJQUFpQkQsR0FBakIsRUFBdUJULFFBQVFXLElBQVIsQ0FBY0QsQ0FBZDs7QUFFdkIsV0FBSSxDQUFDLEdBQUViLE9BQVAsRUFBZ0JMLFNBQVMsSUFBVCxFQUFlUSxPQUFmO0FBRWhCO0FBRUQsTUFoQkQ7QUFrQkE7QUFFRCxJQTVCRDtBQThCQTtBQUVELEVBckRDO0FBdURGOztBQUVNLFNBQVNYLGNBQVQsQ0FBMEJFLEdBQTFCLEVBQWdDOztBQUV0QyxRQUFPLFVBQVdxQixPQUFYLEVBQXFCQyxNQUFyQixFQUE4Qjs7QUFFcEMsUUFBTXJCLFdBQVcsK0JBQWtCb0IsT0FBbEIsRUFBNEJDLE1BQTVCLENBQWpCO0FBQ0F6QixpQkFBZ0JHLEdBQWhCLEVBQXNCQyxRQUF0QjtBQUVBLEVBTEQ7QUFPQTs7QUFFTSxTQUFTRixhQUFULENBQXlCQyxHQUF6QixFQUErQjs7QUFFckMsUUFBTyxJQUFJdUIsT0FBSixDQUFhekIsZUFBZUUsR0FBZixDQUFiLENBQVA7QUFFQSIsImZpbGUiOiJyZXBvcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGZzIGZyb20gJ2ZzJyA7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJyA7XG5pbXBvcnQgeyBwcm9taXNlX2NhbGxiYWNrIH0gZnJvbSAnLi9wcm9taXNlJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvc19jYWxsYmFjayAoIGRpciAsIGNhbGxiYWNrICkge1xuXG5cdCAgZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uKGVyciwgZmlsZXMpIHtcblxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayggZXJyICkgOyAvLyBmb3J3YXJkIGVycm9yXG5cblx0XHRsZXQgcGVuZGluZyA9IGZpbGVzLmxlbmd0aCA7XG5cblx0XHRpZiAoIXBlbmRpbmcpIHJldHVybiBjYWxsYmFjayggbnVsbCAsIFsgXSApIDsgLy8gaXMgZW1wdHlcblxuXHRcdGlmIChmaWxlcy5pbmNsdWRlcygnLmdpdCcpKSByZXR1cm4gY2FsbGJhY2soIG51bGwgLCBbIGRpciBdICkgOyAvLyBpcyByZXBvXG5cblx0XHRjb25zdCByZXN1bHRzID0gWyBdIDtcblxuXHRcdGZvciAoIGNvbnN0IGZpbGUgb2YgZmlsZXMgKSB7XG5cblx0XHRcdGlmICggZmlsZVswXSA9PT0gJy4nICkge1xuXHRcdFx0XHRpZiAoIS0tcGVuZGluZykgY2FsbGJhY2soIG51bGwgLCByZXN1bHRzICkgO1xuXHRcdFx0XHRjb250aW51ZSA7IC8vIHNraXAgaGlkZGVuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZpbGVwYXRoID0gcGF0aC5qb2luKGRpciwgZmlsZSk7XG5cblx0XHRcdGZzLmxzdGF0KGZpbGVwYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuXHRcdFx0XHRpZiAoIGVyciB8fCBzdGF0LmlzU3ltYm9saWNMaW5rKCkgfHwgIXN0YXQuaXNEaXJlY3RvcnkoKSApIHtcblx0XHRcdFx0XHRpZiAoIS0tcGVuZGluZykgY2FsbGJhY2soIG51bGwgLCByZXN1bHRzICkgOyAvLyBza2lwXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbHNlIHtcblxuXHRcdFx0XHRcdHJlcG9zX2NhbGxiYWNrKGZpbGVwYXRoLCBmdW5jdGlvbihlcnIsIHJlcykge1xuXG5cdFx0XHRcdFx0XHRpZiAoZXJyKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCEtLXBlbmRpbmcpIGNhbGxiYWNrKCBudWxsICwgcmVzdWx0cyApIDsgLy8gc2tpcFxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvbnN0IHYgb2YgcmVzICkgcmVzdWx0cy5wdXNoKCB2ICkgO1xuXG5cdFx0XHRcdFx0XHRcdGlmICghLS1wZW5kaW5nKSBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdH1cblxuXHR9KTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3NfZXhlY3V0b3IgKCBkaXIgKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uICggcmVzb2x2ZSAsIHJlamVjdCApIHtcblxuXHRcdGNvbnN0IGNhbGxiYWNrID0gcHJvbWlzZV9jYWxsYmFjayggcmVzb2x2ZSAsIHJlamVjdCApIDtcblx0XHRyZXBvc19jYWxsYmFjayggZGlyICwgY2FsbGJhY2sgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zX3Byb21pc2UgKCBkaXIgKSB7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKCByZXBvc19leGVjdXRvcihkaXIpICkgO1xuXG59XG4iXX0=