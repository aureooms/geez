#!/usr/bin/env node
'use strict';

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _repos = require('./repos');

var _listrAggregateRenderer = require('@aureooms/listr-aggregate-renderer');

var _listrAggregateRenderer2 = _interopRequireDefault(_listrAggregateRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = '.';

const args = process.argv.slice(2);

if (args.length < 1) {
	console.error('usage: geez <git command> [<git command argument>, ...]');
	process.exit(2);
}

const result = _execa2.default.sync('git', ['help', '-a']);
let lines = result.stdout.split('\n');
lines = lines.filter(line => line.match(/^\s+[a-z]/));
lines = lines.map(line => line.trim().split(/\s+/)[0]);
const available_commands = lines.sort();

const cmd = args[0];

if (!available_commands.includes(cmd)) {
	console.error(`Unknown command '${cmd}'.`);
	console.error(`Available commands are: ${available_commands.join(', ')}.`);
	process.exit(2);
}

const tasks = new _listr2.default([{
	title: 'Searching for repos',
	task: ctx => (0, _repos.repos_promise)(cwd).then(repos => {
		ctx.repos = repos;
	})
}, {
	title: `Applying 'git ${args.join(' ')}' to all repos`,
	task: ctx => {

		const pullingtasks = ctx.repos.map(repo => ({
			title: repo,
			task: () => (0, _execa2.default)('git', ['-C', repo].concat(args))
		}));

		return new _listr2.default(pullingtasks, {
			concurrent: 10, // true is too slow when there are a lot of repos
			exitOnError: false
		});
	}
}], {
	renderer: _listrAggregateRenderer2.default,
	collapse: false,
	aggregate: true,
	maxsubtasks: 10
	//showSubtasks: false
});

tasks.run().catch(err => {
	//console.error(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiY3dkIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwicmVzdWx0IiwiZXhlY2EiLCJzeW5jIiwibGluZXMiLCJzdGRvdXQiLCJzcGxpdCIsImZpbHRlciIsImxpbmUiLCJtYXRjaCIsIm1hcCIsInRyaW0iLCJhdmFpbGFibGVfY29tbWFuZHMiLCJzb3J0IiwiY21kIiwiaW5jbHVkZXMiLCJqb2luIiwidGFza3MiLCJMaXN0ciIsInRpdGxlIiwidGFzayIsImN0eCIsInRoZW4iLCJyZXBvcyIsInB1bGxpbmd0YXNrcyIsInJlcG8iLCJjb25jYXQiLCJjb25jdXJyZW50IiwiZXhpdE9uRXJyb3IiLCJyZW5kZXJlciIsImNvbGxhcHNlIiwiYWdncmVnYXRlIiwibWF4c3VidGFza3MiLCJydW4iLCJjYXRjaCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLE1BQU0sR0FBWjs7QUFFQSxNQUFNQyxPQUFPQyxRQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBYjs7QUFFQSxJQUFLSCxLQUFLSSxNQUFMLEdBQWMsQ0FBbkIsRUFBdUI7QUFDdEJDLFNBQVFDLEtBQVIsQ0FBYyx5REFBZDtBQUNBTCxTQUFRTSxJQUFSLENBQWEsQ0FBYjtBQUNBOztBQUVELE1BQU1DLFNBQVNDLGdCQUFNQyxJQUFOLENBQVcsS0FBWCxFQUFrQixDQUFDLE1BQUQsRUFBUyxJQUFULENBQWxCLENBQWY7QUFDQSxJQUFJQyxRQUFRSCxPQUFPSSxNQUFQLENBQWNDLEtBQWQsQ0FBb0IsSUFBcEIsQ0FBWjtBQUNBRixRQUFRQSxNQUFNRyxNQUFOLENBQWNDLFFBQVFBLEtBQUtDLEtBQUwsQ0FBVyxXQUFYLENBQXRCLENBQVI7QUFDQUwsUUFBUUEsTUFBTU0sR0FBTixDQUFXRixRQUFRQSxLQUFLRyxJQUFMLEdBQVlMLEtBQVosQ0FBa0IsS0FBbEIsRUFBeUIsQ0FBekIsQ0FBbkIsQ0FBUjtBQUNBLE1BQU1NLHFCQUFxQlIsTUFBTVMsSUFBTixFQUEzQjs7QUFFQSxNQUFNQyxNQUFNckIsS0FBSyxDQUFMLENBQVo7O0FBRUEsSUFBSyxDQUFFbUIsbUJBQW1CRyxRQUFuQixDQUE0QkQsR0FBNUIsQ0FBUCxFQUEwQztBQUN6Q2hCLFNBQVFDLEtBQVIsQ0FBZSxvQkFBbUJlLEdBQUksSUFBdEM7QUFDQWhCLFNBQVFDLEtBQVIsQ0FBZSwyQkFBMEJhLG1CQUFtQkksSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBOEIsR0FBdkU7QUFDQXRCLFNBQVFNLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBRUQsTUFBTWlCLFFBQVEsSUFBSUMsZUFBSixDQUFVLENBQ3ZCO0FBQ0NDLFFBQU8scUJBRFI7QUFFQ0MsT0FBTUMsT0FBTywwQkFBYzdCLEdBQWQsRUFBbUI4QixJQUFuQixDQUF5QkMsU0FBUztBQUFFRixNQUFJRSxLQUFKLEdBQVlBLEtBQVo7QUFBcUIsRUFBekQ7QUFGZCxDQUR1QixFQUt2QjtBQUNDSixRQUFRLGlCQUFnQjFCLEtBQUt1QixJQUFMLENBQVUsR0FBVixDQUFlLGdCQUR4QztBQUVDSSxPQUFNQyxPQUFPOztBQUVaLFFBQU1HLGVBQWVILElBQUlFLEtBQUosQ0FBVWIsR0FBVixDQUFjZSxTQUFTO0FBQzNDTixVQUFPTSxJQURvQztBQUUzQ0wsU0FBTSxNQUFNLHFCQUFNLEtBQU4sRUFBYSxDQUFDLElBQUQsRUFBT0ssSUFBUCxFQUFhQyxNQUFiLENBQW9CakMsSUFBcEIsQ0FBYjtBQUYrQixHQUFULENBQWQsQ0FBckI7O0FBS0EsU0FBTyxJQUFJeUIsZUFBSixDQUFVTSxZQUFWLEVBQXdCO0FBQzlCRyxlQUFXLEVBRG1CLEVBQ2Y7QUFDZkMsZ0JBQVk7QUFGa0IsR0FBeEIsQ0FBUDtBQUtBO0FBZEYsQ0FMdUIsQ0FBVixFQXFCWDtBQUNGQywyQ0FERTtBQUVGQyxXQUFVLEtBRlI7QUFHRkMsWUFBVyxJQUhUO0FBSUZDLGNBQWE7QUFDYjtBQUxFLENBckJXLENBQWQ7O0FBNkJBZixNQUFNZ0IsR0FBTixHQUFZQyxLQUFaLENBQWtCQyxPQUFPO0FBQ3hCO0FBQ0EsQ0FGRCIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IGV4ZWNhIGZyb20gJ2V4ZWNhJyA7XG5pbXBvcnQgTGlzdHIgZnJvbSAnbGlzdHInIDtcbmltcG9ydCB7IHJlcG9zX3Byb21pc2UgfSBmcm9tICAnLi9yZXBvcycgO1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ0BhdXJlb29tcy9saXN0ci1hZ2dyZWdhdGUtcmVuZGVyZXInIDtcblxuY29uc3QgY3dkID0gJy4nIDtcblxuY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuaWYgKCBhcmdzLmxlbmd0aCA8IDEgKSB7XG5cdGNvbnNvbGUuZXJyb3IoJ3VzYWdlOiBnZWV6IDxnaXQgY29tbWFuZD4gWzxnaXQgY29tbWFuZCBhcmd1bWVudD4sIC4uLl0nKTtcblx0cHJvY2Vzcy5leGl0KDIpO1xufVxuXG5jb25zdCByZXN1bHQgPSBleGVjYS5zeW5jKCdnaXQnLCBbJ2hlbHAnLCAnLWEnXSk7XG5sZXQgbGluZXMgPSByZXN1bHQuc3Rkb3V0LnNwbGl0KCdcXG4nKTtcbmxpbmVzID0gbGluZXMuZmlsdGVyKCBsaW5lID0+IGxpbmUubWF0Y2goL15cXHMrW2Etel0vKSApO1xubGluZXMgPSBsaW5lcy5tYXAoIGxpbmUgPT4gbGluZS50cmltKCkuc3BsaXQoL1xccysvKVswXSApO1xuY29uc3QgYXZhaWxhYmxlX2NvbW1hbmRzID0gbGluZXMuc29ydCgpO1xuXG5jb25zdCBjbWQgPSBhcmdzWzBdIDtcblxuaWYgKCAhIGF2YWlsYWJsZV9jb21tYW5kcy5pbmNsdWRlcyhjbWQpICkge1xuXHRjb25zb2xlLmVycm9yKGBVbmtub3duIGNvbW1hbmQgJyR7Y21kfScuYCk7XG5cdGNvbnNvbGUuZXJyb3IoYEF2YWlsYWJsZSBjb21tYW5kcyBhcmU6ICR7YXZhaWxhYmxlX2NvbW1hbmRzLmpvaW4oJywgJyl9LmApO1xuXHRwcm9jZXNzLmV4aXQoMik7XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IExpc3RyKFtcblx0e1xuXHRcdHRpdGxlOiAnU2VhcmNoaW5nIGZvciByZXBvcycsXG5cdFx0dGFzazogY3R4ID0+IHJlcG9zX3Byb21pc2UoY3dkKS50aGVuKCByZXBvcyA9PiB7IGN0eC5yZXBvcyA9IHJlcG9zIDsgfSApXG5cdH0sXG5cdHtcblx0XHR0aXRsZTogYEFwcGx5aW5nICdnaXQgJHthcmdzLmpvaW4oJyAnKX0nIHRvIGFsbCByZXBvc2AsXG5cdFx0dGFzazogY3R4ID0+IHtcblxuXHRcdFx0Y29uc3QgcHVsbGluZ3Rhc2tzID0gY3R4LnJlcG9zLm1hcChyZXBvID0+ICh7XG5cdFx0XHRcdHRpdGxlOiByZXBvLFxuXHRcdFx0XHR0YXNrOiAoKSA9PiBleGVjYSgnZ2l0JywgWyctQycsIHJlcG9dLmNvbmNhdChhcmdzKSlcblx0XHRcdH0pKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBMaXN0cihwdWxsaW5ndGFza3MsIHtcblx0XHRcdFx0Y29uY3VycmVudDoxMCwgLy8gdHJ1ZSBpcyB0b28gc2xvdyB3aGVuIHRoZXJlIGFyZSBhIGxvdCBvZiByZXBvc1xuXHRcdFx0XHRleGl0T25FcnJvcjpmYWxzZVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cbl0sIHtcblx0cmVuZGVyZXIsXG5cdGNvbGxhcHNlOiBmYWxzZSxcblx0YWdncmVnYXRlOiB0cnVlLFxuXHRtYXhzdWJ0YXNrczogMTAsXG5cdC8vc2hvd1N1YnRhc2tzOiBmYWxzZVxufSk7XG5cbnRhc2tzLnJ1bigpLmNhdGNoKGVyciA9PiB7XG5cdC8vY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG4iXX0=