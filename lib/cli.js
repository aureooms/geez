#!/usr/bin/env node
'use strict';

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _repos = require('./repos');

var _listrAggregateRenderer = require('@aureooms/listr-aggregate-renderer');

var _listrAggregateRenderer2 = _interopRequireDefault(_listrAggregateRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = '.';

const args = process.argv.slice(2);

if (args.length !== 1) {
	console.error('usage: geez {pull|push}');
	process.exit(2);
}
const available_commands = ['pull', 'push'];

const cmd = args[0];

if (!available_commands.includes(cmd)) {
	console.error(`Unknown command '${cmd}'.`);
	process.exit(2);
}

const tasks = new _listr2.default([{
	title: 'Searching for repos',
	task: ctx => (0, _repos.repos_promise)(cwd).then(repos => {
		ctx.repos = repos;
	})
}, {
	title: `${cmd[0].toUpperCase()}${cmd.substring(1)}ing repos`,
	task: ctx => {

		const pullingtasks = ctx.repos.map(repo => ({
			title: repo,
			task: () => (0, _execa2.default)('git', ['-C', repo, cmd])
		}));

		return new _listr2.default(pullingtasks, {
			concurrent: true,
			exitOnError: false
		});
	}
}], {
	renderer: _listrAggregateRenderer2.default,
	collapse: false,
	aggregate: true,
	maxsubtasks: 10
	//showSubtasks: false
});

tasks.run().catch(err => {
	//console.error(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiY3dkIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwiYXZhaWxhYmxlX2NvbW1hbmRzIiwiY21kIiwiaW5jbHVkZXMiLCJ0YXNrcyIsInRpdGxlIiwidGFzayIsImN0eCIsInRoZW4iLCJyZXBvcyIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwicHVsbGluZ3Rhc2tzIiwibWFwIiwicmVwbyIsImNvbmN1cnJlbnQiLCJleGl0T25FcnJvciIsInJlbmRlcmVyIiwiY29sbGFwc2UiLCJhZ2dyZWdhdGUiLCJtYXhzdWJ0YXNrcyIsInJ1biIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFaOztBQUVBLE1BQU1DLE9BQU9DLFFBQVFDLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFiOztBQUVBLElBQUtILEtBQUtJLE1BQUwsS0FBZ0IsQ0FBckIsRUFBeUI7QUFDeEJDLFNBQVFDLEtBQVIsQ0FBYyx5QkFBZDtBQUNBTCxTQUFRTSxJQUFSLENBQWEsQ0FBYjtBQUNBO0FBQ0QsTUFBTUMscUJBQXFCLENBQUUsTUFBRixFQUFXLE1BQVgsQ0FBM0I7O0FBRUEsTUFBTUMsTUFBTVQsS0FBSyxDQUFMLENBQVo7O0FBRUEsSUFBSyxDQUFFUSxtQkFBbUJFLFFBQW5CLENBQTRCRCxHQUE1QixDQUFQLEVBQTBDO0FBQ3pDSixTQUFRQyxLQUFSLENBQWUsb0JBQW1CRyxHQUFJLElBQXRDO0FBQ0FSLFNBQVFNLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBRUQsTUFBTUksUUFBUSxvQkFBVSxDQUN2QjtBQUNDQyxRQUFPLHFCQURSO0FBRUNDLE9BQU1DLE9BQU8sMEJBQWNmLEdBQWQsRUFBbUJnQixJQUFuQixDQUF5QkMsU0FBUztBQUFFRixNQUFJRSxLQUFKLEdBQVlBLEtBQVo7QUFBcUIsRUFBekQ7QUFGZCxDQUR1QixFQUt2QjtBQUNDSixRQUFRLEdBQUVILElBQUksQ0FBSixFQUFPUSxXQUFQLEVBQXFCLEdBQUVSLElBQUlTLFNBQUosQ0FBYyxDQUFkLENBQWlCLFdBRG5EO0FBRUNMLE9BQU1DLE9BQU87O0FBRVosUUFBTUssZUFBZUwsSUFBSUUsS0FBSixDQUFVSSxHQUFWLENBQWNDLFNBQVM7QUFDM0NULFVBQU9TLElBRG9DO0FBRTNDUixTQUFNLE1BQU0scUJBQU0sS0FBTixFQUFhLENBQUMsSUFBRCxFQUFPUSxJQUFQLEVBQWFaLEdBQWIsQ0FBYjtBQUYrQixHQUFULENBQWQsQ0FBckI7O0FBS0EsU0FBTyxvQkFBVVUsWUFBVixFQUF3QjtBQUM5QkcsZUFBVyxJQURtQjtBQUU5QkMsZ0JBQVk7QUFGa0IsR0FBeEIsQ0FBUDtBQUtBO0FBZEYsQ0FMdUIsQ0FBVixFQXFCWDtBQUNGQywyQ0FERTtBQUVGQyxXQUFVLEtBRlI7QUFHRkMsWUFBVyxJQUhUO0FBSUZDLGNBQWE7QUFDYjtBQUxFLENBckJXLENBQWQ7O0FBNkJBaEIsTUFBTWlCLEdBQU4sR0FBWUMsS0FBWixDQUFrQkMsT0FBTztBQUN4QjtBQUNBLENBRkQiLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCBleGVjYSBmcm9tICdleGVjYScgO1xuaW1wb3J0IExpc3RyIGZyb20gJ2xpc3RyJyA7XG5pbXBvcnQgeyByZXBvc19wcm9taXNlIH0gZnJvbSAgJy4vcmVwb3MnIDtcbmltcG9ydCByZW5kZXJlciBmcm9tICdAYXVyZW9vbXMvbGlzdHItYWdncmVnYXRlLXJlbmRlcmVyJyA7XG5cbmNvbnN0IGN3ZCA9ICcuJyA7XG5cbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbmlmICggYXJncy5sZW5ndGggIT09IDEgKSB7XG5cdGNvbnNvbGUuZXJyb3IoJ3VzYWdlOiBnZWV6IHtwdWxsfHB1c2h9Jyk7XG5cdHByb2Nlc3MuZXhpdCgyKTtcbn1cbmNvbnN0IGF2YWlsYWJsZV9jb21tYW5kcyA9IFsgJ3B1bGwnICwgJ3B1c2gnIF0gO1xuXG5jb25zdCBjbWQgPSBhcmdzWzBdIDtcblxuaWYgKCAhIGF2YWlsYWJsZV9jb21tYW5kcy5pbmNsdWRlcyhjbWQpICkge1xuXHRjb25zb2xlLmVycm9yKGBVbmtub3duIGNvbW1hbmQgJyR7Y21kfScuYCk7XG5cdHByb2Nlc3MuZXhpdCgyKTtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgTGlzdHIoW1xuXHR7XG5cdFx0dGl0bGU6ICdTZWFyY2hpbmcgZm9yIHJlcG9zJyxcblx0XHR0YXNrOiBjdHggPT4gcmVwb3NfcHJvbWlzZShjd2QpLnRoZW4oIHJlcG9zID0+IHsgY3R4LnJlcG9zID0gcmVwb3MgOyB9IClcblx0fSxcblx0e1xuXHRcdHRpdGxlOiBgJHtjbWRbMF0udG9VcHBlckNhc2UoKX0ke2NtZC5zdWJzdHJpbmcoMSl9aW5nIHJlcG9zYCxcblx0XHR0YXNrOiBjdHggPT4ge1xuXG5cdFx0XHRjb25zdCBwdWxsaW5ndGFza3MgPSBjdHgucmVwb3MubWFwKHJlcG8gPT4gKHtcblx0XHRcdFx0dGl0bGU6IHJlcG8sXG5cdFx0XHRcdHRhc2s6ICgpID0+IGV4ZWNhKCdnaXQnLCBbJy1DJywgcmVwbywgY21kXSlcblx0XHRcdH0pKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBMaXN0cihwdWxsaW5ndGFza3MsIHtcblx0XHRcdFx0Y29uY3VycmVudDp0cnVlLFxuXHRcdFx0XHRleGl0T25FcnJvcjpmYWxzZVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cbl0sIHtcblx0cmVuZGVyZXIsXG5cdGNvbGxhcHNlOiBmYWxzZSxcblx0YWdncmVnYXRlOiB0cnVlLFxuXHRtYXhzdWJ0YXNrczogMTAsXG5cdC8vc2hvd1N1YnRhc2tzOiBmYWxzZVxufSk7XG5cbnRhc2tzLnJ1bigpLmNhdGNoKGVyciA9PiB7XG5cdC8vY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG4iXX0=