#!/usr/bin/env node
'use strict';

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _repos = require('./repos');

var _listrAggregateRenderer = require('@aureooms/listr-aggregate-renderer');

var _listrAggregateRenderer2 = _interopRequireDefault(_listrAggregateRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = '.';

const args = process.argv.slice(2);

if (args.length < 1) {
	console.error('usage: geez <git command> [<git command argument>, ...]');
	process.exit(2);
}

let available_commands = [];

let result = _execa2.default.sync('git', ['config', '-l']);
let lines = result.stdout.split('\n');
lines = lines.filter(line => line.startsWith('alias.'));
lines = lines.map(line => line.split('=')[0]);
lines = lines.map(line => line.split('.')[1]);
available_commands = available_commands.concat(lines);

result = _execa2.default.sync('git', ['help', '-a']);
lines = result.stdout.split('\n');
lines = lines.filter(line => line.match(/^  [a-z]/));
lines = lines.map(line => line.split(' '));
for (const line of lines) {
	available_commands = available_commands.concat(line.filter(line => line));
}

available_commands.sort();

const cmd = args[0];

if (!available_commands.includes(cmd)) {
	console.error(`Unknown command '${cmd}'.`);
	console.error(`Available commands are: ${available_commands.join(', ')}.`);
	process.exit(2);
}

const tasks = new _listr2.default([{
	title: 'Searching for repos',
	task: ctx => (0, _repos.repos_promise)(cwd).then(repos => {
		ctx.repos = repos;
	})
}, {
	title: `Applying 'git ${args.join(' ')}' to all repos`,
	task: ctx => {

		const pullingtasks = ctx.repos.map(repo => ({
			title: repo,
			task: () => (0, _execa2.default)('git', ['-C', repo].concat(args))
		}));

		return new _listr2.default(pullingtasks, {
			concurrent: true,
			exitOnError: false
		});
	}
}], {
	renderer: _listrAggregateRenderer2.default,
	collapse: false,
	aggregate: true,
	maxsubtasks: 10
	//showSubtasks: false
});

tasks.run().catch(err => {
	//console.error(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiY3dkIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwiYXZhaWxhYmxlX2NvbW1hbmRzIiwicmVzdWx0Iiwic3luYyIsImxpbmVzIiwic3Rkb3V0Iiwic3BsaXQiLCJmaWx0ZXIiLCJsaW5lIiwic3RhcnRzV2l0aCIsIm1hcCIsImNvbmNhdCIsIm1hdGNoIiwic29ydCIsImNtZCIsImluY2x1ZGVzIiwiam9pbiIsInRhc2tzIiwidGl0bGUiLCJ0YXNrIiwiY3R4IiwidGhlbiIsInJlcG9zIiwicHVsbGluZ3Rhc2tzIiwicmVwbyIsImNvbmN1cnJlbnQiLCJleGl0T25FcnJvciIsInJlbmRlcmVyIiwiY29sbGFwc2UiLCJhZ2dyZWdhdGUiLCJtYXhzdWJ0YXNrcyIsInJ1biIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFaOztBQUVBLE1BQU1DLE9BQU9DLFFBQVFDLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFiOztBQUVBLElBQUtILEtBQUtJLE1BQUwsR0FBYyxDQUFuQixFQUF1QjtBQUN0QkMsU0FBUUMsS0FBUixDQUFjLHlEQUFkO0FBQ0FMLFNBQVFNLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBRUQsSUFBSUMscUJBQXFCLEVBQXpCOztBQUVBLElBQUlDLFNBQVMsZ0JBQU1DLElBQU4sQ0FBVyxLQUFYLEVBQWtCLENBQUMsUUFBRCxFQUFXLElBQVgsQ0FBbEIsQ0FBYjtBQUNBLElBQUlDLFFBQVFGLE9BQU9HLE1BQVAsQ0FBY0MsS0FBZCxDQUFvQixJQUFwQixDQUFaO0FBQ0FGLFFBQVFBLE1BQU1HLE1BQU4sQ0FBY0MsUUFBUUEsS0FBS0MsVUFBTCxDQUFnQixRQUFoQixDQUF0QixDQUFSO0FBQ0FMLFFBQVFBLE1BQU1NLEdBQU4sQ0FBV0YsUUFBUUEsS0FBS0YsS0FBTCxDQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FBbkIsQ0FBUjtBQUNBRixRQUFRQSxNQUFNTSxHQUFOLENBQVdGLFFBQVFBLEtBQUtGLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLENBQW5CLENBQVI7QUFDQUwscUJBQXFCQSxtQkFBbUJVLE1BQW5CLENBQTBCUCxLQUExQixDQUFyQjs7QUFFQUYsU0FBUyxnQkFBTUMsSUFBTixDQUFXLEtBQVgsRUFBa0IsQ0FBQyxNQUFELEVBQVMsSUFBVCxDQUFsQixDQUFUO0FBQ0FDLFFBQVFGLE9BQU9HLE1BQVAsQ0FBY0MsS0FBZCxDQUFvQixJQUFwQixDQUFSO0FBQ0FGLFFBQVFBLE1BQU1HLE1BQU4sQ0FBY0MsUUFBUUEsS0FBS0ksS0FBTCxDQUFXLFVBQVgsQ0FBdEIsQ0FBUjtBQUNBUixRQUFRQSxNQUFNTSxHQUFOLENBQVdGLFFBQVFBLEtBQUtGLEtBQUwsQ0FBVyxHQUFYLENBQW5CLENBQVI7QUFDQSxLQUFNLE1BQU1FLElBQVosSUFBb0JKLEtBQXBCLEVBQTRCO0FBQzNCSCxzQkFBcUJBLG1CQUFtQlUsTUFBbkIsQ0FBMEJILEtBQUtELE1BQUwsQ0FBWUMsUUFBUUEsSUFBcEIsQ0FBMUIsQ0FBckI7QUFDQTs7QUFFRFAsbUJBQW1CWSxJQUFuQjs7QUFFQSxNQUFNQyxNQUFNckIsS0FBSyxDQUFMLENBQVo7O0FBRUEsSUFBSyxDQUFFUSxtQkFBbUJjLFFBQW5CLENBQTRCRCxHQUE1QixDQUFQLEVBQTBDO0FBQ3pDaEIsU0FBUUMsS0FBUixDQUFlLG9CQUFtQmUsR0FBSSxJQUF0QztBQUNBaEIsU0FBUUMsS0FBUixDQUFlLDJCQUEwQkUsbUJBQW1CZSxJQUFuQixDQUF3QixJQUF4QixDQUE4QixHQUF2RTtBQUNBdEIsU0FBUU0sSUFBUixDQUFhLENBQWI7QUFDQTs7QUFFRCxNQUFNaUIsUUFBUSxvQkFBVSxDQUN2QjtBQUNDQyxRQUFPLHFCQURSO0FBRUNDLE9BQU1DLE9BQU8sMEJBQWM1QixHQUFkLEVBQW1CNkIsSUFBbkIsQ0FBeUJDLFNBQVM7QUFBRUYsTUFBSUUsS0FBSixHQUFZQSxLQUFaO0FBQXFCLEVBQXpEO0FBRmQsQ0FEdUIsRUFLdkI7QUFDQ0osUUFBUSxpQkFBZ0J6QixLQUFLdUIsSUFBTCxDQUFVLEdBQVYsQ0FBZSxnQkFEeEM7QUFFQ0csT0FBTUMsT0FBTzs7QUFFWixRQUFNRyxlQUFlSCxJQUFJRSxLQUFKLENBQVVaLEdBQVYsQ0FBY2MsU0FBUztBQUMzQ04sVUFBT00sSUFEb0M7QUFFM0NMLFNBQU0sTUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxJQUFELEVBQU9LLElBQVAsRUFBYWIsTUFBYixDQUFvQmxCLElBQXBCLENBQWI7QUFGK0IsR0FBVCxDQUFkLENBQXJCOztBQUtBLFNBQU8sb0JBQVU4QixZQUFWLEVBQXdCO0FBQzlCRSxlQUFXLElBRG1CO0FBRTlCQyxnQkFBWTtBQUZrQixHQUF4QixDQUFQO0FBS0E7QUFkRixDQUx1QixDQUFWLEVBcUJYO0FBQ0ZDLDJDQURFO0FBRUZDLFdBQVUsS0FGUjtBQUdGQyxZQUFXLElBSFQ7QUFJRkMsY0FBYTtBQUNiO0FBTEUsQ0FyQlcsQ0FBZDs7QUE2QkFiLE1BQU1jLEdBQU4sR0FBWUMsS0FBWixDQUFrQkMsT0FBTztBQUN4QjtBQUNBLENBRkQiLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCBleGVjYSBmcm9tICdleGVjYScgO1xuaW1wb3J0IExpc3RyIGZyb20gJ2xpc3RyJyA7XG5pbXBvcnQgeyByZXBvc19wcm9taXNlIH0gZnJvbSAgJy4vcmVwb3MnIDtcbmltcG9ydCByZW5kZXJlciBmcm9tICdAYXVyZW9vbXMvbGlzdHItYWdncmVnYXRlLXJlbmRlcmVyJyA7XG5cbmNvbnN0IGN3ZCA9ICcuJyA7XG5cbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbmlmICggYXJncy5sZW5ndGggPCAxICkge1xuXHRjb25zb2xlLmVycm9yKCd1c2FnZTogZ2VleiA8Z2l0IGNvbW1hbmQ+IFs8Z2l0IGNvbW1hbmQgYXJndW1lbnQ+LCAuLi5dJyk7XG5cdHByb2Nlc3MuZXhpdCgyKTtcbn1cblxubGV0IGF2YWlsYWJsZV9jb21tYW5kcyA9IFsgXSA7XG5cbmxldCByZXN1bHQgPSBleGVjYS5zeW5jKCdnaXQnLCBbJ2NvbmZpZycsICctbCddKTtcbmxldCBsaW5lcyA9IHJlc3VsdC5zdGRvdXQuc3BsaXQoJ1xcbicpO1xubGluZXMgPSBsaW5lcy5maWx0ZXIoIGxpbmUgPT4gbGluZS5zdGFydHNXaXRoKCdhbGlhcy4nKSApO1xubGluZXMgPSBsaW5lcy5tYXAoIGxpbmUgPT4gbGluZS5zcGxpdCgnPScpWzBdICk7XG5saW5lcyA9IGxpbmVzLm1hcCggbGluZSA9PiBsaW5lLnNwbGl0KCcuJylbMV0gKTtcbmF2YWlsYWJsZV9jb21tYW5kcyA9IGF2YWlsYWJsZV9jb21tYW5kcy5jb25jYXQobGluZXMpO1xuXG5yZXN1bHQgPSBleGVjYS5zeW5jKCdnaXQnLCBbJ2hlbHAnLCAnLWEnXSk7XG5saW5lcyA9IHJlc3VsdC5zdGRvdXQuc3BsaXQoJ1xcbicpO1xubGluZXMgPSBsaW5lcy5maWx0ZXIoIGxpbmUgPT4gbGluZS5tYXRjaCgvXiAgW2Etel0vKSApO1xubGluZXMgPSBsaW5lcy5tYXAoIGxpbmUgPT4gbGluZS5zcGxpdCgnICcpICk7XG5mb3IgKCBjb25zdCBsaW5lIG9mIGxpbmVzICkge1xuXHRhdmFpbGFibGVfY29tbWFuZHMgPSBhdmFpbGFibGVfY29tbWFuZHMuY29uY2F0KGxpbmUuZmlsdGVyKGxpbmUgPT4gbGluZSkpO1xufVxuXG5hdmFpbGFibGVfY29tbWFuZHMuc29ydCgpO1xuXG5jb25zdCBjbWQgPSBhcmdzWzBdIDtcblxuaWYgKCAhIGF2YWlsYWJsZV9jb21tYW5kcy5pbmNsdWRlcyhjbWQpICkge1xuXHRjb25zb2xlLmVycm9yKGBVbmtub3duIGNvbW1hbmQgJyR7Y21kfScuYCk7XG5cdGNvbnNvbGUuZXJyb3IoYEF2YWlsYWJsZSBjb21tYW5kcyBhcmU6ICR7YXZhaWxhYmxlX2NvbW1hbmRzLmpvaW4oJywgJyl9LmApO1xuXHRwcm9jZXNzLmV4aXQoMik7XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IExpc3RyKFtcblx0e1xuXHRcdHRpdGxlOiAnU2VhcmNoaW5nIGZvciByZXBvcycsXG5cdFx0dGFzazogY3R4ID0+IHJlcG9zX3Byb21pc2UoY3dkKS50aGVuKCByZXBvcyA9PiB7IGN0eC5yZXBvcyA9IHJlcG9zIDsgfSApXG5cdH0sXG5cdHtcblx0XHR0aXRsZTogYEFwcGx5aW5nICdnaXQgJHthcmdzLmpvaW4oJyAnKX0nIHRvIGFsbCByZXBvc2AsXG5cdFx0dGFzazogY3R4ID0+IHtcblxuXHRcdFx0Y29uc3QgcHVsbGluZ3Rhc2tzID0gY3R4LnJlcG9zLm1hcChyZXBvID0+ICh7XG5cdFx0XHRcdHRpdGxlOiByZXBvLFxuXHRcdFx0XHR0YXNrOiAoKSA9PiBleGVjYSgnZ2l0JywgWyctQycsIHJlcG9dLmNvbmNhdChhcmdzKSlcblx0XHRcdH0pKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBMaXN0cihwdWxsaW5ndGFza3MsIHtcblx0XHRcdFx0Y29uY3VycmVudDp0cnVlLFxuXHRcdFx0XHRleGl0T25FcnJvcjpmYWxzZVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cbl0sIHtcblx0cmVuZGVyZXIsXG5cdGNvbGxhcHNlOiBmYWxzZSxcblx0YWdncmVnYXRlOiB0cnVlLFxuXHRtYXhzdWJ0YXNrczogMTAsXG5cdC8vc2hvd1N1YnRhc2tzOiBmYWxzZVxufSk7XG5cbnRhc2tzLnJ1bigpLmNhdGNoKGVyciA9PiB7XG5cdC8vY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG4iXX0=