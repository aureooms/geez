#!/usr/bin/env node
'use strict';

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _repos = require('./repos');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = '.';

const args = process.argv.slice(2);

if (args.length !== 1) {
	console.error(`usage: ${process.argv0} <command>`);
	process.exit(2);
}
const available_commands = ['pull', 'push'];

const cmd = args[0];

if (!available_commands.includes(cmd)) {
	console.error(`Unknown command '${cmd}'.`);
	process.exit(2);
}

const tasks = new _listr2.default([{
	title: 'Searching for repos',
	task: ctx => (0, _repos.repos_promise)(cwd).then(repos => {
		ctx.repos = repos;
	})
}, {
	title: `${cmd[0].toUpperCase()}${cmd.substring(1)}ing repos`,
	task: ctx => {

		const pullingtasks = ctx.repos.map(repo => ({
			title: repo,
			task: () => (0, _execa2.default)('git', ['-C', repo, cmd])
		}));

		return new _listr2.default(pullingtasks, {
			concurrent: true,
			exitOnError: false
		});
	}
}], {
	collapse: false
});

tasks.run().catch(err => {
	//console.error(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiY3dkIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJhcmd2MCIsImV4aXQiLCJhdmFpbGFibGVfY29tbWFuZHMiLCJjbWQiLCJpbmNsdWRlcyIsInRhc2tzIiwidGl0bGUiLCJ0YXNrIiwiY3R4IiwidGhlbiIsInJlcG9zIiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJwdWxsaW5ndGFza3MiLCJtYXAiLCJyZXBvIiwiY29uY3VycmVudCIsImV4aXRPbkVycm9yIiwiY29sbGFwc2UiLCJydW4iLCJjYXRjaCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQVo7O0FBRUEsTUFBTUMsT0FBT0MsUUFBUUMsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQWI7O0FBRUEsSUFBS0gsS0FBS0ksTUFBTCxLQUFnQixDQUFyQixFQUF5QjtBQUN4QkMsU0FBUUMsS0FBUixDQUFlLFVBQVNMLFFBQVFNLEtBQU0sWUFBdEM7QUFDQU4sU0FBUU8sSUFBUixDQUFhLENBQWI7QUFDQTtBQUNELE1BQU1DLHFCQUFxQixDQUFFLE1BQUYsRUFBVyxNQUFYLENBQTNCOztBQUVBLE1BQU1DLE1BQU1WLEtBQUssQ0FBTCxDQUFaOztBQUVBLElBQUssQ0FBRVMsbUJBQW1CRSxRQUFuQixDQUE0QkQsR0FBNUIsQ0FBUCxFQUEwQztBQUN6Q0wsU0FBUUMsS0FBUixDQUFlLG9CQUFtQkksR0FBSSxJQUF0QztBQUNBVCxTQUFRTyxJQUFSLENBQWEsQ0FBYjtBQUNBOztBQUVELE1BQU1JLFFBQVEsb0JBQVUsQ0FDdkI7QUFDQ0MsUUFBTyxxQkFEUjtBQUVDQyxPQUFNQyxPQUFPLDBCQUFjaEIsR0FBZCxFQUFtQmlCLElBQW5CLENBQXlCQyxTQUFTO0FBQUVGLE1BQUlFLEtBQUosR0FBWUEsS0FBWjtBQUFxQixFQUF6RDtBQUZkLENBRHVCLEVBS3ZCO0FBQ0NKLFFBQVEsR0FBRUgsSUFBSSxDQUFKLEVBQU9RLFdBQVAsRUFBcUIsR0FBRVIsSUFBSVMsU0FBSixDQUFjLENBQWQsQ0FBaUIsV0FEbkQ7QUFFQ0wsT0FBTUMsT0FBTzs7QUFFWixRQUFNSyxlQUFlTCxJQUFJRSxLQUFKLENBQVVJLEdBQVYsQ0FBY0MsU0FBUztBQUMzQ1QsVUFBT1MsSUFEb0M7QUFFM0NSLFNBQU0sTUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxJQUFELEVBQU9RLElBQVAsRUFBYVosR0FBYixDQUFiO0FBRitCLEdBQVQsQ0FBZCxDQUFyQjs7QUFLQSxTQUFPLG9CQUFVVSxZQUFWLEVBQXdCO0FBQzlCRyxlQUFXLElBRG1CO0FBRTlCQyxnQkFBWTtBQUZrQixHQUF4QixDQUFQO0FBS0E7QUFkRixDQUx1QixDQUFWLEVBcUJYO0FBQ0ZDLFdBQVU7QUFEUixDQXJCVyxDQUFkOztBQTBCQWIsTUFBTWMsR0FBTixHQUFZQyxLQUFaLENBQWtCQyxPQUFPO0FBQ3hCO0FBQ0EsQ0FGRCIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IGV4ZWNhIGZyb20gJ2V4ZWNhJyA7XG5pbXBvcnQgTGlzdHIgZnJvbSAnbGlzdHInIDtcbmltcG9ydCB7IHJlcG9zX3Byb21pc2UgfSBmcm9tICAnLi9yZXBvcycgO1xuXG5jb25zdCBjd2QgPSAnLicgO1xuXG5jb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5pZiAoIGFyZ3MubGVuZ3RoICE9PSAxICkge1xuXHRjb25zb2xlLmVycm9yKGB1c2FnZTogJHtwcm9jZXNzLmFyZ3YwfSA8Y29tbWFuZD5gKTtcblx0cHJvY2Vzcy5leGl0KDIpO1xufVxuY29uc3QgYXZhaWxhYmxlX2NvbW1hbmRzID0gWyAncHVsbCcgLCAncHVzaCcgXSA7XG5cbmNvbnN0IGNtZCA9IGFyZ3NbMF0gO1xuXG5pZiAoICEgYXZhaWxhYmxlX2NvbW1hbmRzLmluY2x1ZGVzKGNtZCkgKSB7XG5cdGNvbnNvbGUuZXJyb3IoYFVua25vd24gY29tbWFuZCAnJHtjbWR9Jy5gKTtcblx0cHJvY2Vzcy5leGl0KDIpO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBMaXN0cihbXG5cdHtcblx0XHR0aXRsZTogJ1NlYXJjaGluZyBmb3IgcmVwb3MnLFxuXHRcdHRhc2s6IGN0eCA9PiByZXBvc19wcm9taXNlKGN3ZCkudGhlbiggcmVwb3MgPT4geyBjdHgucmVwb3MgPSByZXBvcyA7IH0gKVxuXHR9LFxuXHR7XG5cdFx0dGl0bGU6IGAke2NtZFswXS50b1VwcGVyQ2FzZSgpfSR7Y21kLnN1YnN0cmluZygxKX1pbmcgcmVwb3NgLFxuXHRcdHRhc2s6IGN0eCA9PiB7XG5cblx0XHRcdGNvbnN0IHB1bGxpbmd0YXNrcyA9IGN0eC5yZXBvcy5tYXAocmVwbyA9PiAoe1xuXHRcdFx0XHR0aXRsZTogcmVwbyxcblx0XHRcdFx0dGFzazogKCkgPT4gZXhlY2EoJ2dpdCcsIFsnLUMnLCByZXBvLCBjbWRdKVxuXHRcdFx0fSkpO1xuXG5cdFx0XHRyZXR1cm4gbmV3IExpc3RyKHB1bGxpbmd0YXNrcywge1xuXHRcdFx0XHRjb25jdXJyZW50OnRydWUsXG5cdFx0XHRcdGV4aXRPbkVycm9yOmZhbHNlXG5cdFx0XHR9KTtcblxuXHRcdH1cblx0fVxuXSwge1xuXHRjb2xsYXBzZTogZmFsc2UsXG5cdC8vc2hvd1N1YnRhc2tzOiBmYWxzZVxufSk7XG5cbnRhc2tzLnJ1bigpLmNhdGNoKGVyciA9PiB7XG5cdC8vY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG4iXX0=