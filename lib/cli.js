#!/usr/bin/env node
'use strict';

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _repos = require('./repos');

var _listrAggregateRenderer = require('@aureooms/listr-aggregate-renderer');

var _listrAggregateRenderer2 = _interopRequireDefault(_listrAggregateRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cwd = '.';

const args = process.argv.slice(2);

if (args.length < 1) {
	console.error('usage: geez <git command> [<git command argument>, ...]');
	process.exit(2);
}

let available_commands = [];

let result = _execa2.default.sync('git', ['config', '-l']);
let lines = result.stdout.split('\n');
lines = lines.filter(line => line.startsWith('alias.'));
lines = lines.map(line => line.split('=')[0]);
lines = lines.map(line => line.split('.')[1]);
available_commands = available_commands.concat(lines);

result = _execa2.default.sync('git', ['help', '-a']);
lines = result.stdout.split('\n');
lines = lines.filter(line => line.match(/^  [a-z]/));
lines = lines.map(line => line.split(' '));
for (const line of lines) {
	available_commands = available_commands.concat(line.filter(line => line));
}

available_commands.sort();

const cmd = args[0];

if (!available_commands.includes(cmd)) {
	console.error(`Unknown command '${cmd}'.`);
	console.error(`Available commands are: ${available_commands.join(', ')}.`);
	process.exit(2);
}

const tasks = new _listr2.default([{
	title: 'Searching for repos',
	task: ctx => (0, _repos.repos_promise)(cwd).then(repos => {
		ctx.repos = repos;
	})
}, {
	title: `Applying 'git ${args.join(' ')}' to all repos`,
	task: ctx => {

		const pullingtasks = ctx.repos.map(repo => ({
			title: repo,
			task: () => (0, _execa2.default)('git', ['-C', repo].concat(args))
		}));

		return new _listr2.default(pullingtasks, {
			concurrent: 10, // true is too slow when there are a lot of repos
			exitOnError: false
		});
	}
}], {
	renderer: _listrAggregateRenderer2.default,
	collapse: false,
	aggregate: true,
	maxsubtasks: 10
	//showSubtasks: false
});

tasks.run().catch(err => {
	//console.error(err);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsiY3dkIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwiYXZhaWxhYmxlX2NvbW1hbmRzIiwicmVzdWx0Iiwic3luYyIsImxpbmVzIiwic3Rkb3V0Iiwic3BsaXQiLCJmaWx0ZXIiLCJsaW5lIiwic3RhcnRzV2l0aCIsIm1hcCIsImNvbmNhdCIsIm1hdGNoIiwic29ydCIsImNtZCIsImluY2x1ZGVzIiwiam9pbiIsInRhc2tzIiwidGl0bGUiLCJ0YXNrIiwiY3R4IiwidGhlbiIsInJlcG9zIiwicHVsbGluZ3Rhc2tzIiwicmVwbyIsImNvbmN1cnJlbnQiLCJleGl0T25FcnJvciIsInJlbmRlcmVyIiwiY29sbGFwc2UiLCJhZ2dyZWdhdGUiLCJtYXhzdWJ0YXNrcyIsInJ1biIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFaOztBQUVBLE1BQU1DLE9BQU9DLFFBQVFDLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixDQUFiOztBQUVBLElBQUtILEtBQUtJLE1BQUwsR0FBYyxDQUFuQixFQUF1QjtBQUN0QkMsU0FBUUMsS0FBUixDQUFjLHlEQUFkO0FBQ0FMLFNBQVFNLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBRUQsSUFBSUMscUJBQXFCLEVBQXpCOztBQUVBLElBQUlDLFNBQVMsZ0JBQU1DLElBQU4sQ0FBVyxLQUFYLEVBQWtCLENBQUMsUUFBRCxFQUFXLElBQVgsQ0FBbEIsQ0FBYjtBQUNBLElBQUlDLFFBQVFGLE9BQU9HLE1BQVAsQ0FBY0MsS0FBZCxDQUFvQixJQUFwQixDQUFaO0FBQ0FGLFFBQVFBLE1BQU1HLE1BQU4sQ0FBY0MsUUFBUUEsS0FBS0MsVUFBTCxDQUFnQixRQUFoQixDQUF0QixDQUFSO0FBQ0FMLFFBQVFBLE1BQU1NLEdBQU4sQ0FBV0YsUUFBUUEsS0FBS0YsS0FBTCxDQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FBbkIsQ0FBUjtBQUNBRixRQUFRQSxNQUFNTSxHQUFOLENBQVdGLFFBQVFBLEtBQUtGLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLENBQW5CLENBQVI7QUFDQUwscUJBQXFCQSxtQkFBbUJVLE1BQW5CLENBQTBCUCxLQUExQixDQUFyQjs7QUFFQUYsU0FBUyxnQkFBTUMsSUFBTixDQUFXLEtBQVgsRUFBa0IsQ0FBQyxNQUFELEVBQVMsSUFBVCxDQUFsQixDQUFUO0FBQ0FDLFFBQVFGLE9BQU9HLE1BQVAsQ0FBY0MsS0FBZCxDQUFvQixJQUFwQixDQUFSO0FBQ0FGLFFBQVFBLE1BQU1HLE1BQU4sQ0FBY0MsUUFBUUEsS0FBS0ksS0FBTCxDQUFXLFVBQVgsQ0FBdEIsQ0FBUjtBQUNBUixRQUFRQSxNQUFNTSxHQUFOLENBQVdGLFFBQVFBLEtBQUtGLEtBQUwsQ0FBVyxHQUFYLENBQW5CLENBQVI7QUFDQSxLQUFNLE1BQU1FLElBQVosSUFBb0JKLEtBQXBCLEVBQTRCO0FBQzNCSCxzQkFBcUJBLG1CQUFtQlUsTUFBbkIsQ0FBMEJILEtBQUtELE1BQUwsQ0FBWUMsUUFBUUEsSUFBcEIsQ0FBMUIsQ0FBckI7QUFDQTs7QUFFRFAsbUJBQW1CWSxJQUFuQjs7QUFFQSxNQUFNQyxNQUFNckIsS0FBSyxDQUFMLENBQVo7O0FBRUEsSUFBSyxDQUFFUSxtQkFBbUJjLFFBQW5CLENBQTRCRCxHQUE1QixDQUFQLEVBQTBDO0FBQ3pDaEIsU0FBUUMsS0FBUixDQUFlLG9CQUFtQmUsR0FBSSxJQUF0QztBQUNBaEIsU0FBUUMsS0FBUixDQUFlLDJCQUEwQkUsbUJBQW1CZSxJQUFuQixDQUF3QixJQUF4QixDQUE4QixHQUF2RTtBQUNBdEIsU0FBUU0sSUFBUixDQUFhLENBQWI7QUFDQTs7QUFFRCxNQUFNaUIsUUFBUSxvQkFBVSxDQUN2QjtBQUNDQyxRQUFPLHFCQURSO0FBRUNDLE9BQU1DLE9BQU8sMEJBQWM1QixHQUFkLEVBQW1CNkIsSUFBbkIsQ0FBeUJDLFNBQVM7QUFBRUYsTUFBSUUsS0FBSixHQUFZQSxLQUFaO0FBQXFCLEVBQXpEO0FBRmQsQ0FEdUIsRUFLdkI7QUFDQ0osUUFBUSxpQkFBZ0J6QixLQUFLdUIsSUFBTCxDQUFVLEdBQVYsQ0FBZSxnQkFEeEM7QUFFQ0csT0FBTUMsT0FBTzs7QUFFWixRQUFNRyxlQUFlSCxJQUFJRSxLQUFKLENBQVVaLEdBQVYsQ0FBY2MsU0FBUztBQUMzQ04sVUFBT00sSUFEb0M7QUFFM0NMLFNBQU0sTUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxJQUFELEVBQU9LLElBQVAsRUFBYWIsTUFBYixDQUFvQmxCLElBQXBCLENBQWI7QUFGK0IsR0FBVCxDQUFkLENBQXJCOztBQUtBLFNBQU8sb0JBQVU4QixZQUFWLEVBQXdCO0FBQzlCRSxlQUFXLEVBRG1CLEVBQ2Y7QUFDZkMsZ0JBQVk7QUFGa0IsR0FBeEIsQ0FBUDtBQUtBO0FBZEYsQ0FMdUIsQ0FBVixFQXFCWDtBQUNGQywyQ0FERTtBQUVGQyxXQUFVLEtBRlI7QUFHRkMsWUFBVyxJQUhUO0FBSUZDLGNBQWE7QUFDYjtBQUxFLENBckJXLENBQWQ7O0FBNkJBYixNQUFNYyxHQUFOLEdBQVlDLEtBQVosQ0FBa0JDLE9BQU87QUFDeEI7QUFDQSxDQUZEIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgZXhlY2EgZnJvbSAnZXhlY2EnIDtcbmltcG9ydCBMaXN0ciBmcm9tICdsaXN0cicgO1xuaW1wb3J0IHsgcmVwb3NfcHJvbWlzZSB9IGZyb20gICcuL3JlcG9zJyA7XG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAnQGF1cmVvb21zL2xpc3RyLWFnZ3JlZ2F0ZS1yZW5kZXJlcicgO1xuXG5jb25zdCBjd2QgPSAnLicgO1xuXG5jb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5pZiAoIGFyZ3MubGVuZ3RoIDwgMSApIHtcblx0Y29uc29sZS5lcnJvcigndXNhZ2U6IGdlZXogPGdpdCBjb21tYW5kPiBbPGdpdCBjb21tYW5kIGFyZ3VtZW50PiwgLi4uXScpO1xuXHRwcm9jZXNzLmV4aXQoMik7XG59XG5cbmxldCBhdmFpbGFibGVfY29tbWFuZHMgPSBbIF0gO1xuXG5sZXQgcmVzdWx0ID0gZXhlY2Euc3luYygnZ2l0JywgWydjb25maWcnLCAnLWwnXSk7XG5sZXQgbGluZXMgPSByZXN1bHQuc3Rkb3V0LnNwbGl0KCdcXG4nKTtcbmxpbmVzID0gbGluZXMuZmlsdGVyKCBsaW5lID0+IGxpbmUuc3RhcnRzV2l0aCgnYWxpYXMuJykgKTtcbmxpbmVzID0gbGluZXMubWFwKCBsaW5lID0+IGxpbmUuc3BsaXQoJz0nKVswXSApO1xubGluZXMgPSBsaW5lcy5tYXAoIGxpbmUgPT4gbGluZS5zcGxpdCgnLicpWzFdICk7XG5hdmFpbGFibGVfY29tbWFuZHMgPSBhdmFpbGFibGVfY29tbWFuZHMuY29uY2F0KGxpbmVzKTtcblxucmVzdWx0ID0gZXhlY2Euc3luYygnZ2l0JywgWydoZWxwJywgJy1hJ10pO1xubGluZXMgPSByZXN1bHQuc3Rkb3V0LnNwbGl0KCdcXG4nKTtcbmxpbmVzID0gbGluZXMuZmlsdGVyKCBsaW5lID0+IGxpbmUubWF0Y2goL14gIFthLXpdLykgKTtcbmxpbmVzID0gbGluZXMubWFwKCBsaW5lID0+IGxpbmUuc3BsaXQoJyAnKSApO1xuZm9yICggY29uc3QgbGluZSBvZiBsaW5lcyApIHtcblx0YXZhaWxhYmxlX2NvbW1hbmRzID0gYXZhaWxhYmxlX2NvbW1hbmRzLmNvbmNhdChsaW5lLmZpbHRlcihsaW5lID0+IGxpbmUpKTtcbn1cblxuYXZhaWxhYmxlX2NvbW1hbmRzLnNvcnQoKTtcblxuY29uc3QgY21kID0gYXJnc1swXSA7XG5cbmlmICggISBhdmFpbGFibGVfY29tbWFuZHMuaW5jbHVkZXMoY21kKSApIHtcblx0Y29uc29sZS5lcnJvcihgVW5rbm93biBjb21tYW5kICcke2NtZH0nLmApO1xuXHRjb25zb2xlLmVycm9yKGBBdmFpbGFibGUgY29tbWFuZHMgYXJlOiAke2F2YWlsYWJsZV9jb21tYW5kcy5qb2luKCcsICcpfS5gKTtcblx0cHJvY2Vzcy5leGl0KDIpO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBMaXN0cihbXG5cdHtcblx0XHR0aXRsZTogJ1NlYXJjaGluZyBmb3IgcmVwb3MnLFxuXHRcdHRhc2s6IGN0eCA9PiByZXBvc19wcm9taXNlKGN3ZCkudGhlbiggcmVwb3MgPT4geyBjdHgucmVwb3MgPSByZXBvcyA7IH0gKVxuXHR9LFxuXHR7XG5cdFx0dGl0bGU6IGBBcHBseWluZyAnZ2l0ICR7YXJncy5qb2luKCcgJyl9JyB0byBhbGwgcmVwb3NgLFxuXHRcdHRhc2s6IGN0eCA9PiB7XG5cblx0XHRcdGNvbnN0IHB1bGxpbmd0YXNrcyA9IGN0eC5yZXBvcy5tYXAocmVwbyA9PiAoe1xuXHRcdFx0XHR0aXRsZTogcmVwbyxcblx0XHRcdFx0dGFzazogKCkgPT4gZXhlY2EoJ2dpdCcsIFsnLUMnLCByZXBvXS5jb25jYXQoYXJncykpXG5cdFx0XHR9KSk7XG5cblx0XHRcdHJldHVybiBuZXcgTGlzdHIocHVsbGluZ3Rhc2tzLCB7XG5cdFx0XHRcdGNvbmN1cnJlbnQ6MTAsIC8vIHRydWUgaXMgdG9vIHNsb3cgd2hlbiB0aGVyZSBhcmUgYSBsb3Qgb2YgcmVwb3Ncblx0XHRcdFx0ZXhpdE9uRXJyb3I6ZmFsc2Vcblx0XHRcdH0pO1xuXG5cdFx0fVxuXHR9XG5dLCB7XG5cdHJlbmRlcmVyLFxuXHRjb2xsYXBzZTogZmFsc2UsXG5cdGFnZ3JlZ2F0ZTogdHJ1ZSxcblx0bWF4c3VidGFza3M6IDEwLFxuXHQvL3Nob3dTdWJ0YXNrczogZmFsc2Vcbn0pO1xuXG50YXNrcy5ydW4oKS5jYXRjaChlcnIgPT4ge1xuXHQvL2NvbnNvbGUuZXJyb3IoZXJyKTtcbn0pO1xuIl19